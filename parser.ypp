%{
        #include <cstdio>
        #include <stdio.h>
        #include <iostream>
        #include <vector>
        #include <map>
        #include <string>
        #include "SemanticAnalyzer.hpp"
        #include "tacs.hpp"
        #include "asm.hpp"
        using namespace std;
        int yylex ();
        int yyparse();
        int getLineNumber();
        int yyerror(const char *s);
        string decompiled_text;
        vector<TAC*> tac_vec;
        int error_flag = 0;
        AST* error_ast = new AST(ERROR);

        

%}

%code requires 
{ 
#include "Symbols.hpp"
#include "AST.hpp"

}


%union {
        Symbol *symbol;
        AST *ast;
        vector<AST*> *ast_list;
}

%token KW_CHAR          
%token KW_INT         
%token KW_IF             
%token KW_THEN           
%token KW_ELSE           
%token KW_WHILE          
%token KW_READ           
%token KW_PRINT          
%token KW_RETURN      
%token<symbol> TK_IDENTIFIER  
%token<symbol> LIT_INT           
%token<symbol> LIT_CHAR          
%token<symbol> LIT_STRING     
%token TOKEN_ERROR    

%type<ast> program
%type<ast> lit
%type<ast> vector
%type<ast> expr
%type<ast> cmd
%type<ast> block
%type<ast> dec
%type<ast> type
%type<ast_list> cmd_list
%type<ast_list> print_list
%type<ast_list> arg_list
%type<ast_list> arg_list_tail
%type<ast_list> lit_list
%type<ast_list> param_list
%type<ast_list> param_list_tail
%type<ast_list> dec_list


%left '+' '-'
%left '*' '/'
%left '<' '>' '=' '&' '|'
%right '~'

%%

program: 
        dec_list { $$ = new AST(PROGRAM, *$1); if(error_flag == 0){  decompiled_text = $$->ast_decompiler($$); SemanticAnalyzer::check_ast_semantic($$); tac_vec = TAC::TAC_Gen($$); TAC::TAC_Print(tac_vec); ASM::generate_ASM(tac_vec);}}
        ;

dec_list : 
        dec dec_list { $$ = $2; $$->insert($$->begin(),$1); }
        | dec { $$ = new vector<AST*>(1,$1); }
        ;
dec: 
     type TK_IDENTIFIER '=' lit ';' { $$ = new AST(DEC_VAR, {$1, new AST(SYMBOL,$2),$4});}
   |  type TK_IDENTIFIER '=' lit error { $$ = error_ast;fprintf(stderr,"Missing ;\n");}
   |  type TK_IDENTIFIER error { $$ = error_ast; fprintf(stderr, "Error in declaration ;\n");}
   
   | type vector '=' lit_list ';'  { $$ = new AST(DEC_VECTOR_INIT, {$1, $2, new AST(INIT,*$4)});}
   | type vector '=' lit_list error  { $$ = error_ast; fprintf(stderr, "Missing ;\n");}
   | type vector ';' { $$ = new AST(DEC_VECTOR, {$1, $2});}
   | type vector error  { $$ = error_ast; fprintf(stderr, "Error in vector declaration, maybe missing ;\n");}
   | type TK_IDENTIFIER '(' param_list ')' block  { $$ = new AST(DEC_FUNC, {$1, new AST(SYMBOL,$2), new AST(PARAMLIST, *$4), $6}); /* $$->print_ast(new AST(PARAM, *$4), 0); */ }
        ;

vector: TK_IDENTIFIER '[' LIT_INT ']' { $$ = new AST(VECTOR, {new AST(SYMBOL,$1), new AST(SYMBOL,$3)});}
        | TK_IDENTIFIER '[' LIT_INT error { $$ = error_ast; fprintf(stderr,"Missing ]\n");}
        ;

lit_list: lit lit_list  { $$ = $2; $$->insert($$->begin(), $1); }
        | lit { $$ = new vector<AST*>(1,$1); }
        ;

param_list: 
        type TK_IDENTIFIER  param_list_tail { $$ = $3; $$->insert($$->begin(), new AST(PARAM,{$1, new AST(SYMBOL,$2)})); }
        |  { $$ = new vector<AST*>(); }
        ;
        
param_list_tail : ',' type TK_IDENTIFIER param_list_tail  { $$ = $4; $$->insert($$->begin(), new AST(PARAM,{$2, new AST(SYMBOL,$3)})); }
        | { $$ = new vector<AST*>(); }
        ;

type: KW_INT { $$ = new AST(INT); }
    | KW_CHAR { $$ = new AST(CHAR); }
    ;

block: '{' cmd_list '}' { $$ = new AST(BLOCK, *$2);}
        |'{' cmd_list error { $$ = error_ast; fprintf(stderr, "Missing }\n");} 
        ;

cmd_list:  {$$ = new vector<AST*>();}
        |  cmd cmd_list {$$ = $2; $$->insert($$->begin(),$1);}
        ;

cmd:';' { $$ = new AST(EMPTY); }
   | KW_IF '('expr')' KW_THEN cmd {$$ = new AST(IF, {$3,$6});}
   | KW_IF '('expr')' KW_THEN cmd KW_ELSE cmd {$$ = new AST(IF_ELSE, {$3,$6,$8});}

   | KW_READ TK_IDENTIFIER ';' {$$ = new AST(READ, {new AST(SYMBOL,$2)});}
   | KW_READ TK_IDENTIFIER error {$$ = error_ast; fprintf(stderr, "Missing ;\n");}
   
   | KW_RETURN expr ';' {$$ = new AST(RETURN, {$2});}
   | KW_RETURN expr error {$$ = error_ast; fprintf(stderr, "Missing ;\n");}
   
   | KW_PRINT print_list ';' {$$ = new AST(PRINT, *$2);}
   | KW_PRINT print_list error {$$ = error_ast;fprintf(stderr, "Missing ;\n");}

   | KW_WHILE '('expr')' cmd { $$ = new AST(WHILE, {$3,$5});}
   | block { $$ = $1;}

   | TK_IDENTIFIER '=' expr ';' {$$ = new AST(ASSIGN, {new AST(SYMBOL,$1),$3});}
   | TK_IDENTIFIER '=' expr error {$$ = error_ast; fprintf(stderr, "Missing ;\n");}
   | TK_IDENTIFIER error {$$ = error_ast; fprintf(stderr, "Error id assignment in command\n");}


   | TK_IDENTIFIER '[' expr ']' '=' expr ';' {$$ = new AST(ASSIGN_VECTOR, {new AST(SYMBOL,$1),$3,$6});}
   | TK_IDENTIFIER '[' expr ']' '=' expr error {$$ = error_ast; fprintf(stderr, "Missing ;\n");}
   | TK_IDENTIFIER '[' expr ']' error {$$ = error_ast; fprintf(stderr, "Missing vector assignment in command\n");}

  ;

expr: 
        expr '+' expr  { $$ = new AST(ADD, {$1,$3}); }
        | expr '+' error  { $$ = error_ast; fprintf(stderr, "Expecting expr after +\n") }

        | expr '-' expr { $$ = new AST(SUB, {$1,$3}); }
        | expr '-' error  { $$ = error_ast; fprintf(stderr, "Expecting expr after -\n") }

        | expr '*' expr { $$ = new AST(MULT, {$1,$3}); }
        | expr '*' error  { $$ = error_ast; fprintf(stderr, "Expecting expr after *\n") }

        | expr '/' expr { $$ = new AST(DIV, {$1,$3}); }
        | expr '/' error  { $$ = error_ast; fprintf(stderr, "Expecting expr after //\n") }

        | expr '<' expr { $$ = new AST(SMALLER, {$1,$3}); }
        | expr '<' error  { $$ = error_ast; fprintf(stderr, "Expecting expr after <\n"); }

        | expr '>' expr { $$ = new AST(BIGGER, {$1,$3}); }
        | expr '>' error  { $$ = error_ast; fprintf(stderr, "Expecting expr after >\n"); }

        | expr '=' expr { $$ = new AST(EQUAL, {$1,$3}); }
        | expr '=' error  { $$ = error_ast; fprintf(stderr, "Expecting expr after =\n"); }

        | expr '&' expr { $$ = new AST(AND, {$1,$3}); }
        | expr '&' error  { $$ = error_ast; fprintf(stderr, "Expecting expr after &\n"); }

        | expr '|' expr { $$ = new AST(OR, {$1,$3}); }
        | expr '|' error  { $$ = error_ast; fprintf(stderr, "Expecting expr after |\n"); }

        |'~' expr { $$ = new AST(NOT, {$2}); }
        | '~' error  { $$ = error_ast; fprintf(stderr, "Expecting expr after ~\n"); }

        | '(' expr ')' { $$ = $2; }
        | '(' expr error  { $$ = error_ast; fprintf(stderr, "Expecting )\n"); }
        | '(' error ')'  { $$ = error_ast; fprintf(stderr, "Expecting expr between ()\n") }

        | TK_IDENTIFIER '(' arg_list ')' { $$ = new AST(FUNCALL, {new AST(SYMBOL, $1),new AST(ARG_LIST, *$3)}); }
        | TK_IDENTIFIER  { $$ = new AST(SYMBOL, $1);  }
        | TK_IDENTIFIER '[' expr ']' { $$ = new AST(VECTOR, {new AST(SYMBOL,$1),$3}); }
        | TK_IDENTIFIER error  { $$ = error_ast; fprintf(stderr, "Error\n") }
        | lit
        ;

lit: 
    LIT_INT { $$ = new AST(SYMBOL, $1); }
    | LIT_CHAR { $$ = new AST(SYMBOL, $1); }
    ;

print_list: expr print_list { $$ = $2; $$->insert($$->begin(),$1);}
        | LIT_STRING print_list { $$ = $2; $$->insert($$->begin(),new AST(SYMBOL,$1));}
        | expr { $$ = new vector<AST*>(1,$1); }
        | LIT_STRING { $$ = new vector<AST*>(1,new AST(SYMBOL,$1)); }
        ;

arg_list:
        expr arg_list_tail { $$ = $2; $$->insert($$->begin(),$1);}
        |  { $$ = new vector<AST*>(); }
        ;

arg_list_tail:
        ',' expr arg_list_tail { $$ = $3; $$->insert($$->begin(),$2);}
        | { $$ = new vector<AST*>(); }
        ;
%%

int yyerror(const char *s) {
  fprintf(stderr, "Error: %s in line %d\n", s, getLineNumber());
  error_flag = 1;
  //exit(3);
  return 3;
}

